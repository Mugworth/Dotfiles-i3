clear_all_shortcuts yes

tab_bar_min_tabs 1
draw_minimal_borders yes
tab_bar_margin_height 0.0 0.0
# map ctrl+n set_tab_title

inactive_text_alpha 0.7

allow_remote_control yes
listen_on unix:@mykitty

font_family      JetBrainsMono Nerd Font

force_ltr yes
font_size 10

#: Font size (in pts)

adjust_line_height 0
# adjust_column_width 0

#: Change the size of each character cell kitty renders. You can use
#: either numbers, which are interpreted as pixels or percentages
#: (number followed by %), which are interpreted as percentages of the
#: unmodified values. You can use negative pixels or percentages less
#: than 100% to reduce sizes (but this might cause rendering
#: artifacts).

# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols

#: Map the specified unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each unicode code
#: point is specified in the form U+<code point in hexadecimal>. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. symbol_map itself can be specified multiple
#: times. Syntax is::

#:     symbol_map codepoints Font Family Name

# box_drawing_scale 0.001, 1, 1.5, 2

#: Change the sizes of the lines used for the box drawing unicode
#: characters These values are in pts. They will be scaled by the
#: monitor DPI to arrive at a pixel value. There must be four values
#: corresponding to thin, normal, thick, and very thick lines.


# cursor magenta

#: Default cursor color

cursor_shape block

shell_integration no-cursor
#: The cursor shape can be one of (block, beam, underline)

# cursor_blink_interval 0
cursor_stop_blinking_after 2

#: The interval (in seconds) at which to blink the cursor. Set to zero
#: to disable blinking. Note that numbers smaller than repaint_delay
#: will be limited to repaint_delay. Stop blinking cursor after the
#: specified number of seconds of keyboard inactivity. Set to zero to
#: never stop blinking.

scrollback_lines 10000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen.

# wheel_scroll_multiplier 5

#: Modify the amount scrolled by the mouse wheel or touchpad. Use
#: negative numbers to change scroll direction.

# url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

# open_url_modifiers kitty_mod

#: The modifier keys to press when clicking with the mouse on URLs to
#: open the URL

open_url_with vivaldi

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler.
# rectangle_select_modifiers ctrl+alt

#: The modifiers to use rectangular selection (i.e. to select text in
#: a rectangular block with the mouse)

# select_by_word_characters :@-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alpha-numeric character in the unicode database will be matched.

# click_interval 0.5

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds)

# mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.

repaint_delay 20

#: Delay (in milliseconds) between screen updates. Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate.

input_delay 0

#: Delay (in milliseconds) before input from the program running in
#: the terminal is processed. Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

# sync_to_monitor no

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing)
#: when scrolling. However, it limits the rendering speed to the
#: refresh rate of your monitor. With a very high speed mouse/high
#: keyboard repeat rate, you may notice some slight input latency. If
#: so, set this to no.

enable_audio_bell yes

#: Enable/disable the audio bell. Useful in environments that require
#: silence.

# visual_bell_duration 0.0

#: Visual bell duration. Flash the screen when a bell occurs for the
#: specified number of seconds. Set to zero to disable.

window_alert_on_bell yes

#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on linux.

bell_on_tab yes

#: Show a bell symbol on the tab if a bell occurs in one of the
#: windows in the tab and the window is not the currently focused
#: window

#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

enabled_layouts tall:bias=53;full-size=1,vertical,stack, horizontal

remember_window_size  no
initial_window_width  640
initial_window_height 380

window_border_width 2

#: The width (in pts) of window borders. Will be rounded to the
#: nearest number of pixels based on screen resolution. Note that
#: borders are displayed only when more than one window is visible.
#: They are meant to separate multiple windows.

window_margin_width 0

#: The window margin (in pts) (blank area outside the border)

# single_window_margin_width -1000.0

#: The window margin (in pts) to use when only a single window is
#: visible. Negative values will cause the value of
#: window_margin_width to be used instead.

window_padding_width 1

#: The window padding (in pts) (blank area between the text and the
#: window border)
bell_border_color #ff6c6b

#: The color for the border of inactive windows in which a bell has
#: occurred

tab_bar_edge bottom

#: Which edge to show the tab bar on, top or bottom

tab_bar_margin_width 0

tab_separator " "

tab_bar_style separator

tab_powerline_style round

#tab_title_template             "{index} {fmt.fg.tab}{title}"
tab_title_template              "{fmt.fg._3f444a}{fmt.bg._1f2329}  {f'{title[:6]}…{title[-6:]}' if title.rindex(title[-1]) + 1 > 25 else title}{' []' if layout_name == 'stack' else ''} "
active_tab_title_template       "{fmt.fg._000000}{fmt.bg._bbc2cf}  {f'{title[:8]}…{title[-10:]}' if title.rindex(title[-1]) + 1 > 25 else title}{' []' if layout_name == 'stack' else ''} "
tab_title_max_length 30
tab_fade 0

active_tab_foreground   #1f2329
active_tab_background   #81a1c1
active_tab_font_style   bold
inactive_tab_foreground #eeeeee
inactive_tab_background #1f2329
inactive_tab_font_style italic

# dynamic_background_opacity no

color0 #2a2e38
color1 #ff6c6b
color2 #98be65
color3 #ecbe7b
color4 #51afef
color5 #c678dd
color6 #8fbcbb
color7 #dfdfdf
color8 #3f444a
color9 #ff6655
color10 #99bb66
color11 #ebcb8b
color12 #61afef
color13 #B48ead
color14 #46d9ff
color15 #bbc2cf
cursor #bbc2cf
selection_foreground #3b3f4c
selection_background #bbc2cf
background #1f2329
foreground #bbc2cf
url_color #73b8f1
active_border_color #97be65
#active_border_color none
inactive_border_color #3f444a

shell zsh
editor nvim

startup_session sessions/default

# :     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

confirm_os_window_close 0

kitty_mod ctrl+shift
map alt+c  copy_to_clipboard
map alt+v  paste_from_clipboard
#: You can also pass the contents of the current selection to any
#: program using pass_selection_to_program. By default, the system's
#: open program is used, but you can specify your own, for example::

# map kitty_mod+o pass_selection_to_program vivaldi

map alt+a         scroll_line_up
map alt+s         scroll_line_down
map alt+u   scroll_page_up
map alt+d   scroll_page_down

#: You can send the contents of the current screen + history buffer as
#: stdin to an arbitrary program using the placeholders @text (which
#: is the plain text) and @ansi (which includes text styling escape
#: codes). For only the current screen, use @screen or @ansi_screen.
#: For example, the following command opens the scrollback buffer in
#: less in a new window::

map kitty_mod+s new_window @ansi less +G -R

#: You can open a new window running an arbitrary program, for
#: example::

# map kitty_mod+y      new_window lf

map kitty_mod+y      kitten my_kitty.py

map ctrl+enter         new_window_with_cwd
map kitty_mod+enter    detach_window

map ctrl+j kitten vim-kitty/pass_keys.py neighboring_window bottom ctrl+j
map ctrl+k kitten vim-kitty/pass_keys.py neighboring_window top    ctrl+k
map ctrl+h kitten vim-kitty/pass_keys.py neighboring_window left   ctrl+h
map ctrl+l kitten vim-kitty/pass_keys.py neighboring_window right  ctrl+l
map ctrl+alt+k move_window top
map ctrl+alt+j move_window bottom
map ctrl+alt+l move_window right
map ctrl+alt+h move_window left
map kitty_mod+r start_resizing_window
map kitty_mod+h resize_window narrower 2
map kitty_mod+l resize_window wider 2
map kitty_mod+j resize_window taller 2
map kitty_mod+k resize_window shorter 2

map alt+grave launch --type=overlay zsh -ic "kitty @ ls | jq -r '.[0].tabs | map(.title) | .[]' | fzf | xargs -I _ kitty @ focus-tab -m title:_"

map alt+1 launch ~/.config/kitty/new-tab/new_tab.sh 1
map alt+2 launch ~/.config/kitty/new-tab/new_tab.sh 2
map alt+3 launch ~/.config/kitty/new-tab/new_tab.sh 3
map alt+4 launch ~/.config/kitty/new-tab/new_tab.sh 4
map alt+5 launch ~/.config/kitty/new-tab/new_tab.sh 5
map alt+6 launch ~/.config/kitty/new-tab/new_tab.sh 6
map alt+7 launch ~/.config/kitty/new-tab/new_tab.sh 7

# map ctrl+n launch zsh -ic "rg -No '^\S*' ~/.config/kitty/sessions/Sesje | fzf | xargs -I _ zsh -ic "kitty @ launch --type=tab --tab-title _ --cwd=$(rg -N _ ~/.config/kitty/sessions/Sesje | rg -No '\S*.$')""
map kitty_mod+n launch ~/.config/kitty/fzf-session.sh
# map kitty_mod+n     no_op
# map ctrl+n          new_tab
map ctrl+q          close_window

map kitty_mod+w next_layout

map f5 load_config_file /home/kuba/.config/kitty/kitty.conf


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: You can change the font size for all top-level kitty windows at a
#: time or only the current one.

map alt+Shift+u change_font_size all +2.0
map alt+Shift+d change_font_size all -2.0
map alt+Shift+= change_font_size all 0

map alt+o kitten hints
map ctrl+s send_text all \r
# map ctrl+g send_text all \r
# map ctrl+b send_text all \r

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

#map kitty_mod+y kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

map kitty_mod+f toggle_layout stack

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -
# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+u      input_unicode_character
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#:     map ctrl+alt+a send_text all Special text

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

